sudo apt update
sudo apt install postgresql postgresql-contrib

psql --version

sudo -i -u postgres
psql

Instalar pgAdmin 4
curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/pgadmin.gpg
sudo sh -c 'echo "deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main" > /etc/apt/sources.list.d/pgadmin4.list'

sudo apt update
sudo apt install pgadmin4

Ejecutar pgAdmin
sudo apt install pgadmin4-desktop


Estos comandos activan extensiones en PostgreSQL. Las extensiones agregan funcionalidades adicionales a la base de datos.  

### 📌 **Explicación de cada extensión**
---

### 1️⃣ `CREATE EXTENSION IF NOT EXISTS "pgcrypto";`
🔹 **¿Qué hace?**  
Habilita la extensión `pgcrypto`, que proporciona funciones criptográficas en PostgreSQL.  

🔹 **Funciones que agrega:**  
- `gen_random_uuid()` → Genera un UUID aleatorio.  
- `crypt('contraseña', gen_salt('md5'))` → Hashea contraseñas.  
- `decrypt()` y `encrypt()` → Cifrado de datos.

🔹 **Ejemplo de uso:**  
```sql
SELECT gen_random_uuid();
-- Resultado: 550e8400-e29b-41d4-a716-446655440000
```

---

### 2️⃣ `CREATE EXTENSION IF NOT EXISTS "uuid-ossp";`
🔹 **¿Qué hace?**  
Agrega funciones para generar UUIDs usando diferentes algoritmos.  

🔹 **Funciones que agrega:**  
- `uuid_generate_v1()` → Basado en MAC address y timestamp.  
- `uuid_generate_v4()` → Genera un UUID aleatorio (como `gen_random_uuid()`).  

🔹 **Ejemplo de uso:**  
```sql
SELECT uuid_generate_v4();
-- Resultado: a4c4f647-65de-4d7f-9c91-0f53c5b78cde
```
🔹 **Diferencia con `pgcrypto`**  
- `uuid-ossp` y `pgcrypto` pueden generar UUIDs, pero `pgcrypto` usa solo `gen_random_uuid()` (versión 4).  
- `uuid-ossp` te permite elegir entre diferentes versiones de UUID.

---

### 3️⃣ `CREATE EXTENSION IF NOT EXISTS "pg_stat_statements";`
🔹 **¿Qué hace?**  
Permite monitorear y analizar consultas SQL ejecutadas en la base de datos.  

🔹 **¿Para qué se usa?**  
- Ver las consultas más lentas.  
- Optimizar índices y mejorar rendimiento.  

🔹 **Ejemplo de uso:**  
```sql
SELECT * FROM pg_stat_statements ORDER BY total_time DESC LIMIT 5;
```
Esto muestra las 5 consultas que más tiempo han consumido en la base de datos.

---

### 4️⃣ `CREATE EXTENSION IF NOT EXISTS "pg_trgm";`
🔹 **¿Qué hace?**  
Permite realizar **búsquedas aproximadas** y mejorar consultas con texto en PostgreSQL.  

🔹 **Funciones que agrega:**  
- `similarity('texto1', 'texto2')` → Calcula la similitud entre dos cadenas.  
- `word_similarity('texto1', 'texto2')` → Versión más flexible de `similarity()`.  
- `gin` y `gist` indexes para búsquedas más rápidas en texto.  

🔹 **Ejemplo de uso:**  
```sql
SELECT similarity('postgresql', 'postgre') AS resultado;
-- Resultado: 0.75  (75% de similitud)
```
🔹 **¿Para qué se usa?**  
- **Autocompletado** en búsquedas.  
- **Corrección de errores tipográficos** en bases de datos.  

---

### 🚀 **Resumen rápido**
| Extensión | Función principal |
|-----------|------------------|
| **pgcrypto** | Funciones criptográficas (UUID, hashing de contraseñas). |
| **uuid-ossp** | Generación de UUIDs con diferentes versiones. |
| **pg_stat_statements** | Monitorea consultas SQL para optimizar rendimiento. |
| **pg_trgm** | Búsquedas aproximadas en texto (autocompletado, similitud). |

Si necesitas más detalles o ejemplos específicos, dime qué estás intentando hacer y te ayudo. 😊
