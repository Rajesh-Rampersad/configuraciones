## ‚ú™ Comandos Git M√°s Usados

### **1. Configuraci√≥n Inicial**
```sh
git config --global user.name "Tu Nombre"
git config --global user.email "tuemail@example.com"
```
**Configura tu nombre y correo en Git.**

```sh
git config --list
```
**Muestra la configuraci√≥n actual de Git.**

---
### **2. Inicializar y Clonar Repositorios**
```sh
git init
```
**Inicializa un nuevo repositorio en la carpeta actual.**

```sh
git clone <url>
```
**Clona un repositorio remoto en tu m√°quina local.**

---
### **3. Estado y Cambios**
```sh
git status
```
**Muestra el estado de los archivos en el repositorio.**

```sh
git add <archivo>
git add .
```
**Agrega archivos al √°rea de preparaci√≥n.**

```sh
git commit -m "Mensaje del commit"
```
**Guarda los cambios en el historial del repositorio.**

```sh
git diff
```
**Muestra diferencias entre archivos modificados y la √∫ltima versi√≥n confirmada.**

---
### **4. Deshacer Cambios**
```sh
git checkout -- <archivo>
```
**Descarta cambios en un archivo antes de `git add`.**

```sh
git reset HEAD <archivo>
```
**Saca un archivo del √°rea de preparaci√≥n.**

```sh
git reset --hard HEAD~1
```
**Revierte el √∫ltimo commit y borra los cambios.**

---
### **5. Ver Historial**
```sh
git log
git log --oneline --graph --all
```
**Muestra el historial de commits de forma detallada o resumida.**

```sh
git show <commit_hash>
```
**Muestra los cambios de un commit espec√≠fico.**

---
### **6. Ramas (Branches)**
```sh
git branch
```
**Lista las ramas existentes.**

```sh
git branch <nombre>
```
**Crea una nueva rama.**

```sh
git switch <nombre>
```
**Cambia a otra rama.**

```sh
git merge <nombre>
```
**Fusiona una rama con la actual.**

```sh
git branch -d <nombre>
```
**Elimina una rama local.**

---
### **7. Trabajando con Repositorios Remotos**
```sh
git remote add origin <url>
```
**Vincula un repositorio local con un remoto.**

```sh
git remote -v
```
**Muestra los repositorios remotos vinculados.**

```sh
git push -u origin <nombre_rama>
```
**Sube una rama al repositorio remoto y la vincula.**

```sh
git pull
```
**Descarga y fusiona cambios desde el remoto.**

```sh
git fetch
```
**Descarga cambios sin fusionarlos autom√°ticamente.**

---
### **8. Etiquetas (Tags)**
```sh
git tag <nombre_version>
```
**Crea una etiqueta para marcar una versi√≥n.**

```sh
git tag
```
**Muestra todas las etiquetas existentes.**

```sh
git push origin <nombre_version>
```
**Sube una etiqueta al repositorio remoto.**

---
### **9. Stash (Guardar cambios temporalmente)**
```sh
git stash
```
**Guarda cambios sin confirmarlos.**

```sh
git stash pop
```
**Restaura cambios guardados.**

```sh
git stash list
```
**Muestra los cambios guardados en stash.**

```sh
git stash drop
```
**Elimina el stash m√°s reciente.**

---
### **10. C√≥mo Generar una Llave SSH**
Si necesitas autenticarte en GitHub sin escribir tu contrase√±a cada vez, sigue estos pasos:

```sh
ssh-keygen -t rsa -b 4096 -C "tuemail@example.com"
```
**Genera una nueva clave SSH.**

Presiona `Enter` para aceptar la ubicaci√≥n predeterminada:  
`~/.ssh/id_rsa` (clave privada)  
`~/.ssh/id_rsa.pub` (clave p√∫blica)

```sh
cat ~/.ssh/id_rsa.pub
```
**Muestra la clave p√∫blica.**

Copia la clave y agr√©gala en **GitHub ‚Üí Settings ‚Üí SSH Keys**.

---

Este listado cubre los comandos esenciales que necesitar√°s en el d√≠a a d√≠a con Git. üöÄ


